#!/usr/bin/env bash

usage() {
    echo "Usage: $0 --open <branch_name> [--setup] [--remove [branch_name]] [--close [branch_name]] [--minimize [branch_name]] [--help]"
    echo ""
    echo "Options:"
    echo "  --open <branch_name>      Create worktree and open tmux session"
    echo "  --remove [branch_name]    Remove worktree (auto-detects if omitted)"
    echo "  --close [branch_name]     Kill tmux session (auto-detects if omitted)"
    echo "  --minimize [branch_name]  Close all nvim panes in tmux session"
    echo "  --setup                   Run \$WORKSPACE_INTERNAL_SETUP_CMD after open"
    echo "  --help                    Show this help"
    exit 0
}

add_worktree=false
run_setup=false
remove_worktree=false
close_session=false
minimize_panes=false
branch_name=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --open)
            add_worktree=true
            branch_name=$2; shift
            ;;
        --remove)
            remove_worktree=true
            if [[ $# -gt 1 && $2 != --* ]]; then
                branch_name=$2; shift
            else
                branch_name=$(git branch --show-current)
            fi
            ;;
        --close)
            close_session=true
            if [[ $# -gt 1 && $2 != --* ]]; then
                branch_name=$2; shift
            else
                branch_name=$(git branch --show-current)
            fi
            ;;
        --setup)
            run_setup=true
            ;;
        --help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
    shift
done

if { $add_worktree || $remove_worktree || $close_session || $minimize_panes; } && [[ -z "${branch_name}" ]]; then
    echo "Error: branch name required"
    usage
fi

base_path=$(git rev-parse --show-toplevel)
worktree_path="$base_path/../${branch_name}"

if $close_session; then
    if tmux has-session -t "${branch_name}" 2>/dev/null; then
        echo "Killing tmux session: ${branch_name}"
        tmux kill-session -t "${branch_name}"
    else
        echo "No tmux session found: ${branch_name}"
    fi
    exit 0
fi

if $remove_worktree; then
    protected=(_main _master main master)
    for p in "${protected[@]}"; do
        [[ "${branch_name}" == "${p}" ]] && {
            echo "Refusing to remove protected branch: ${p}"
            exit 1
        }
    done

    workdir="$base_path/../${branch_name}"
    [[ ! -d "$workdir" ]] && { echo "Cannot resolve worktree for ${branch_name}"; exit 1; }
    abs=$(command -v realpath &>/dev/null && realpath "$workdir" || cd "$workdir" && pwd -P)

    reg=$(git worktree list --porcelain | awk '$1=="worktree"{print $2}')
    if echo "$reg" | grep -Fxq "$abs"; then
        echo "Removing worktree: $abs"
        git worktree remove --force "$abs" || { echo "Failed removing worktree $abs"; exit 1; }
    else
        echo "No registered worktree at $abs"; exit 1
    fi

    # kill stray processes
    if command -v lsof &>/dev/null; then
        pids=$(lsof +D "$abs" -t 2>/dev/null)
    else
        pids=$(ps -eo pid,cmd | awk -v p="$abs" '$0~p{print $1}')
    fi
    [[ -n "$pids" ]] && echo "$pids" | xargs -r kill

    exit 0
fi

copy_env_files() {
    local source_dir="$1"
    local target_dir="$2"

    echo "Copying .env files from $source_dir to $target_dir"

    # Find all .env files in source directory and subdirectories
    find "$source_dir" -name ".env" -type f | while IFS= read -r env_file; do
        # Get relative path from source directory
        rel_path="${env_file#$source_dir/}"
        target_file="$target_dir/$rel_path"
        target_parent=$(dirname "$target_file")

        # Create target directory if it doesn't exist
        if [[ ! -d "$target_parent" ]]; then
            mkdir -p "$target_parent"
        fi

        # Copy .env file if target doesn't exist
        if [[ -f "$target_file" ]]; then
            echo "Preserving existing: $rel_path"
        else
            echo "Copying environment file: $rel_path"
            cp "$env_file" "$target_file"
        fi
    done
}

if $add_worktree; then
    # Create worktree if missing
    if [[ -d "${worktree_path}" ]]; then
        echo "Reusing existing worktree at: ${worktree_path}"
        [[ ! -e "${worktree_path}/.git" ]] && { echo "Error: ${worktree_path} is not a git worktree"; exit 1; }
    else
        git fetch
        git worktree add --checkout -B "${branch_name}" "${worktree_path}"
    fi

    # Tmux session cleanup
    if tmux has-session -t "${branch_name}" 2>/dev/null; then
        echo "Killing existing tmux session: ${branch_name}"
        tmux kill-session -t "${branch_name}"
    fi

    # Create single tmux session with one window and one pane
    tmux new-session -d -s "${branch_name}" -c "${worktree_path}"

    # Set workspace environment variables
    for var_name in $(printenv | grep -oE '^WORKSPACE_[^=]+' | grep -v '^WORKSPACE_INTERNAL'); do
        env_key="${var_name#WORKSPACE_}"
        env_value="${!var_name}"
        tmux set-environment -t "${branch_name}" "${env_key}" "${env_value}"
    done

    # Copy all .env files from parent worktree to new worktree
    copy_env_files "$base_path" "$worktree_path"

    # Post-setup commands
    if $run_setup; then
        if [[ -z "${WORKSPACE_INTERNAL_SETUP_CMD}" ]]; then
            echo "Error: WORKSPACE_INTERNAL_SETUP_CMD is not set"
            exit 1
        fi
        tmux send-keys -t "${branch_name}" "${WORKSPACE_INTERNAL_SETUP_CMD}" C-m
    fi

    if [[ -n "$TMUX" ]]; then
      tmux switch-client -t "${branch_name}"
    else
      tmux attach-session -t "${branch_name}"
    fi
fi
